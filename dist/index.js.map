{"version":3,"sources":["../src/index.ts"],"sourcesContent":["/**\n * Next.js için merkezileştirilmiş link yönetimi\n * Route tanımlarını tek yerden yönetmek için kullanılır\n */\n\ntype Slug = string | number;\ntype RouteParams = Record<string, string | number | undefined>;\ntype CentralizedLinkFunction = (params?: RouteParams | Slug) => string;\ntype LinkConfig = Record<string, CentralizedLinkFunction>;\n\n// Links objesi - direkt fonksiyon çağrısı için\nconst links: Record<string, CentralizedLinkFunction> = {};\n\n/**\n * Tüm linkleri toplu olarak yapılandırır\n * Uygulama başlamadan önce tüm route'ları tanımlamak için kullanılır\n * @param config - Route yapılandırma objesi\n * \n * @example\n * ```ts\n * configureLinks({\n *   home: () => '/',\n *   regions: () => '/vizeler/bolgeler',\n *   region: (slug: Slug) => `/vizeler/bolge/${slug}`,\n *   visas: () => '/vizeler',\n *   visa: (slug: Slug) => `/vize/${slug}`,\n *   contact: () => '/iletisim',\n *   turlar: () => '/turlar',\n *   tur: (slug: Slug) => `/tur/${slug}`,\n * });\n * \n * // Kullanım:\n * <a href={links.visas()}>Vizeler</a>\n * <a href={links.region(slugify(country.slug))}>Bölge</a>\n * ```\n */\nconst configureLinks = (config: LinkConfig): void => {\n  // Mevcut linkleri temizle\n  Object.keys(links).forEach(key => {\n    delete links[key];\n  });\n  \n  // Yeni linkleri ekle\n  Object.entries(config).forEach(([key, value]) => {\n    links[key] = value;\n  });\n};\n\n/**\n * Yeni bir route tanımı ekler\n * @param key - Route'un benzersiz anahtarı\n * @param value - Route'u oluşturan fonksiyon\n * \n * @example\n * ```ts\n * // Basit route\n * centralizedLink('home', () => '/');\n * \n * // Parametreli route (obje ile)\n * centralizedLink('user', ({ id }) => `/user/${id}`);\n * \n * // Parametreli route (slug ile)\n * centralizedLink('region', (slug: Slug) => `/vizeler/bolge/${slug}`);\n * \n * // Sorgu parametreli route\n * centralizedLink('search', ({ q, page = 1 }) => `/search?q=${q}&page=${page}`);\n * \n * // Kullanım:\n * links.home() // '/'\n * links.region('avrupa') // '/vizeler/bolge/avrupa'\n * ```\n */\nconst centralizedLink = (\n  key: string,\n  value: CentralizedLinkFunction,\n): void => {\n  links[key] = value;\n};\n\n/**\n * Tanımlanan route'u alır\n * @param key - Route anahtarı\n * @param params - Route parametreleri (obje veya slug)\n * @returns Route URL'si\n * \n * @example\n * ```ts\n * const userUrl = getLink('user', { id: 123 }); // '/user/123'\n * const regionUrl = getLink('region', 'avrupa'); // '/vizeler/bolge/avrupa'\n * \n * // Artık direkt de kullanabilirsiniz:\n * const userUrl = links.user({ id: 123 }); // '/user/123'\n * const regionUrl = links.region('avrupa'); // '/vizeler/bolge/avrupa'\n * ```\n */\nconst getLink = (key: string, params?: RouteParams | Slug): string => {\n  const linkFunction = links[key];\n  if (!linkFunction) {\n    throw new Error(`Link \"${key}\" tanımlanmamış. Önce centralizedLink ile tanımlayın.`);\n  }\n  return linkFunction(params);\n};\n\n/**\n * Tüm tanımlanan route'ları listeler\n * @returns Tanımlanan route anahtarları\n */\nconst getDefinedLinks = (): string[] => {\n  return Object.keys(links);\n};\n\n/**\n * Belirli bir route'un tanımlı olup olmadığını kontrol eder\n * @param key - Route anahtarı\n * @returns Route tanımlı mı?\n */\nconst hasLink = (key: string): boolean => {\n  return key in links;\n};\n\nexport { \n  centralizedLink, \n  getLink, \n  getDefinedLinks, \n  hasLink, \n  configureLinks,\n  links \n};\n\nexport type { \n  Slug, \n  RouteParams, \n  CentralizedLinkFunction, \n  LinkConfig \n};"],"mappings":"AAWA,IAAMA,EAAiD,CAAC,EAyBlDC,EAAkBC,GAA6B,CAEnD,OAAO,KAAKF,CAAK,EAAE,QAAQG,GAAO,CAChC,OAAOH,EAAMG,CAAG,CAClB,CAAC,EAGD,OAAO,QAAQD,CAAM,EAAE,QAAQ,CAAC,CAACC,EAAKC,CAAK,IAAM,CAC/CJ,EAAMG,CAAG,EAAIC,CACf,CAAC,CACH,EA0BMC,EAAkB,CACtBF,EACAC,IACS,CACTJ,EAAMG,CAAG,EAAIC,CACf,EAkBME,EAAU,CAACH,EAAaI,IAAwC,CACpE,IAAMC,EAAeR,EAAMG,CAAG,EAC9B,GAAI,CAACK,EACH,MAAM,IAAI,MAAM,SAASL,CAAG,mFAAuD,EAErF,OAAOK,EAAaD,CAAM,CAC5B,EAMME,EAAkB,IACf,OAAO,KAAKT,CAAK,EAQpBU,EAAWP,GACRA,KAAOH","names":["links","configureLinks","config","key","value","centralizedLink","getLink","params","linkFunction","getDefinedLinks","hasLink"]}